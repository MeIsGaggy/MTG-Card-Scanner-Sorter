# ============================== CARD SCANNER CONFIG (Ender 3 S1 + Klipper) ==============================
# Motion-only setup for MTG card sorting. Heaters/fans are neutralized. Scanner app drives pass/fail.

# ===== UI Helpers =====
[gcode_macro SORTER_HELP]
description: Show the short how-to for the card scanner
gcode:
  { action_respond_info(
    "CARD SCANNER — Quick start:\\n"
    "1) SORTER_HOME (or RUN_SORTER_INTERACTIVE COUNT=1 HOME=1)\\n"
    "2) SET_START_HEIGHT_GUIDED  -> then SET_START_HEIGHT_OK\\n"
    "3) SORT_ONE (or SORT_10). While at scan, your app sends SCAN_OK / SCAN_FAIL.\\n"
    "Useful: SHOW_STACKS, CANCEL_SCAN_WAIT, SET_TIMEOUT_S VALUE=<sec> (0=infinite)"
  ) }

[gcode_macro SORT_ONE]
description: Pick 1 card and run one full scan/place cycle
gcode:
  RUN_SORTER_INTERACTIVE COUNT=1

[gcode_macro SORT_10]
description: Pick and process 10 cards
gcode:
  RUN_SORTER_INTERACTIVE COUNT=10

[gcode_macro SET_TIMEOUT_S]
description: Set scan wait timeout (seconds). 0 = wait forever (no auto-fail)
gcode:
  {% set V = params.VALUE|default(0)|int %}
  SET_GCODE_VARIABLE MACRO=SORTER_PARAMS VARIABLE=scan_timeout_s VALUE={V}
  { action_respond_info("Scan timeout set to %s" % ("infinite" if V==0 else ("%ds" % V))) }

[gcode_macro CANCEL_SCAN_WAIT]
description: Cancel any active scan wait / countdown ticks
gcode:
  SET_GCODE_VARIABLE MACRO=VISION_STATE VARIABLE=busy VALUE=0
  UPDATE_DELAYED_GCODE ID=VISION_TIMEOUT DURATION=0
  UPDATE_DELAYED_GCODE ID=VISION_TICK    DURATION=0
  RESPOND PREFIX=info MSG="Scan wait cancelled."


# ===== Half-turn constant =====
[gcode_macro VAC_CONSTANTS]
# 25.482 * (12/42) / 2 = 3.640286 mm per half-turn
variable_half_turn_mm: 3.640286
gcode: G4 P0


# ===== Toggle using your existing VAC_ON / VAC_OFF =====
[gcode_macro VAC_TOGGLE_HALF]
description: Use VAC_ON for +half-turn, then return to 0. Loops COUNT times.
gcode:
  {% set N   = params.COUNT|default(10)|int %}
  {% set SP  = params.SPEED|default(printer["gcode_macro SORTER_PARAMS"].vac_speed)|float %}
  {% set DW  = params.DWELL_MS|default(printer["gcode_macro SORTER_PARAMS"].vac_dwell_ms)|int %}
  {% set MM  = params.MM|default(printer["gcode_macro VAC_CONSTANTS"].half_turn_mm)|float %}

  {% set OLD_ON  = printer["gcode_macro SORTER_PARAMS"].vac_on_dist|float %}
  {% set OLD_OFF = printer["gcode_macro SORTER_PARAMS"].vac_off_dist|float %}

  SET_GCODE_VARIABLE MACRO=SORTER_PARAMS VARIABLE=vac_on_dist  VALUE={MM}
  SET_GCODE_VARIABLE MACRO=SORTER_PARAMS VARIABLE=vac_off_dist VALUE={-MM}   ; kept for later if you enable negatives

  MANUAL_STEPPER STEPPER=VAC ENABLE=1
  MANUAL_STEPPER STEPPER=VAC SET_POSITION=0

  {% for i in range(N) %}
    VAC_ON  SPEED={SP} DWELL={DW}            ; goes to +MM
    G4 P{DW}
    MANUAL_STEPPER STEPPER=VAC MOVE=0 SPEED={SP}  ; return to 0 (acts like OFF)
    G4 P{DW}
  {% endfor %}

  SET_GCODE_VARIABLE MACRO=SORTER_PARAMS VARIABLE=vac_on_dist  VALUE={OLD_ON}
  SET_GCODE_VARIABLE MACRO=SORTER_PARAMS VARIABLE=vac_off_dist VALUE={OLD_OFF}
  MANUAL_STEPPER STEPPER=VAC SET_POSITION=0
  { action_respond_info("VAC_TOGGLE_HALF done (COUNT=%d, SPEED=%.3f, MM=%.6f)" % (N, SP, MM)) }

# ===== Direct motion version (bypass VAC_ON/OFF) =====
[gcode_macro VAC_BOUNCE_HALF]
description: Directly drive VAC half-turn forward/back COUNT times (MANUAL_STEPPER).
gcode:
  {% set N  = params.COUNT|default(10)|int %}
  {% set SP = params.SPEED|default(2)|float %}
  {% set DW = params.DWELL_MS|default(200)|int %}
  {% set MM = params.MM|default(printer["gcode_macro VAC_CONSTANTS"].half_turn_mm)|float %}

  MANUAL_STEPPER STEPPER=VAC ENABLE=1
  MANUAL_STEPPER STEPPER=VAC SET_POSITION=0

  {% for i in range(N) %}
    MANUAL_STEPPER STEPPER=VAC MOVE={MM} SPEED={SP}   ; go out +half-turn
    G4 P{DW}
    MANUAL_STEPPER STEPPER=VAC MOVE=0  SPEED={SP}     ; come back to 0
    G4 P{DW}
  {% endfor %}

  MANUAL_STEPPER STEPPER=VAC SET_POSITION=0
  { action_respond_info("VAC_BOUNCE_HALF done (COUNT=%d, SPEED=%.3f, MM=%.6f)" % (N, SP, MM)) }


# ===== Includes / Core =====
[include fluidd.cfg]
# [include timelapse.cfg]

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command

[printer]
kinematics: cartesian
max_velocity: 100
max_accel: 750
max_z_velocity: 100
max_z_accel: 500
square_corner_velocity: 5.0

# ----- Axes -----
[stepper_x]
step_pin: PC2
dir_pin: PB9
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: !PA5
position_endstop: -10
position_max: 235
position_min: -15
homing_speed: 50

[stepper_y]
step_pin: PB8
dir_pin: PB7
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: !PA6
position_endstop: -8
position_max: 240
position_min: -13
homing_speed: 50

[stepper_z]
step_pin: PB6
dir_pin: !PB5
enable_pin: !PC3
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_max: 270
position_min: -10
homing_speed: 8

# ----- Probe (BLTouch) -----
[bltouch]
sensor_pin: ^PC14
control_pin: PC13
x_offset: -31.8
y_offset: -40.5
z_offset: 4.085
probe_with_touch_mode: true
stow_on_each_sample: false
samples: 3
speed: 5.0

[safe_z_home]
home_xy_position: 110,110
speed: 75
z_hop: 10
z_hop_speed: 5

# Optional: bed mesh (not required for scan plane)
[bed_mesh]
speed: 120
mesh_min: 10, 10
mesh_max: 200, 194
probe_count: 4,4
algorithm: bicubic
fade_start: 1
fade_end: 10
fade_target: 0

# ----- QoL -----
[respond]
[display_status]
[pause_resume]
recover_velocity: 25
[idle_timeout]
timeout: 1800

# Temperatures (read-only)
[temperature_sensor bed_sensor]
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC4
min_temp: 0
max_temp: 110

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

# ----- Neutralize print-related G-codes -----
[gcode_macro M104]
description: NO-OP (heating disabled)
gcode:
  RESPOND PREFIX=warn MSG="M104 ignored: heaters disabled"

[gcode_macro M109]
description: NO-OP (heating disabled)
gcode:
  RESPOND PREFIX=warn MSG="M109 ignored: heaters disabled"

[gcode_macro M140]
description: NO-OP (bed heating disabled)
gcode:
  RESPOND PREFIX=warn MSG="M140 ignored: bed disabled"

[gcode_macro M190]
description: NO-OP (bed heating disabled)
gcode:
  RESPOND PREFIX=warn MSG="M190 ignored: bed disabled"

[gcode_macro M106]
description: NO-OP (fans repurposed later)
gcode:
  RESPOND PREFIX=info MSG="M106 ignored: fans disabled"

[gcode_macro M107]
description: NO-OP
gcode:
  RESPOND PREFIX=info MSG="M107 ignored: fans disabled"


# ===== Sorter Coordinates / Motion Tunables =====
[gcode_macro SORTER_PARAMS]
# Zones (X,Y) — adjust to your stacks and scan spot
variable_input_xy:    60.0, 180.0   # Top-Left (unscanned)
variable_scan_xy:    160.0, 180.0   # Top-Right (scan)
variable_reject_xy:   60.0,  60.0   # Bottom-Left (failed)
variable_finish_xy:  160.0,  60.0   # Bottom-Right (finished)

# Tool offset (if suction center != nozzle center)
variable_tool_offset_x: 0.0
variable_tool_offset_y: 0.0

# Heights & speeds
variable_clearance_z: 25.0          # safe travel height
variable_approach_z:  2.0           # hover height above stack top before touching
variable_pick_z:      0.6           # Z at pick relative to stack top
variable_place_z:     0.8           # Z at place relative to stack top
variable_pick_guard:  0.20          # never go below (stack top + this)
variable_min_z_floor: 0.30          # absolute min Z for any move (mm)
variable_scan_h:      0.0           # absolute scan plane (bed = 0.0)
variable_xy_speed:    6000          # mm/min
variable_z_speed:     600           # mm/min

# Timings (ms)
variable_dwell_pick_ms:     400
variable_dwell_scan_ms:     500
variable_dwell_release_ms:  200
variable_lift_after_pick:   2.0

# Probe speeds for guided height set
variable_probe_fast: 5.0
variable_probe_slow: 1.5

# Syringe / vacuum on extruder driver (manual_stepper)
variable_vac_on_dist:   6.0   # mm plunger move for VAC_ON
variable_vac_off_dist: -6.0   # mm plunger move for VAC_OFF
variable_vac_speed:    20.0   # mm/s
variable_vac_dwell_ms: 120

# Scan wait behavior
variable_scan_timeout_s:    0   # 0 = wait forever (no auto-fail)
variable_scan_warn_step_s: 10   # warning every N seconds
variable_timeout_auto_fail: 0   # 1 = auto-fail at timeout; 0 = never auto-fail
gcode:
  G4 P0


# ===== Dynamic Stack Heights (absolute Z from bed) =====
[gcode_macro STACK_STATE]
variable_card_thickness: 0.305
variable_start_h: 0.0
variable_finish_h: 0.0
variable_reject_h: 0.0
gcode: G4 P0


# ===== Vacuum Plunger on Extruder Driver =====
[manual_stepper VAC]
step_pin: PB4
dir_pin:  PB3
enable_pin: !PC3
microsteps: 16
gear_ratio: 42:12
rotation_distance: 25.482
full_steps_per_rotation: 200
velocity: 25
accel: 200
position_min: -30
position_max:  30

# ===== Setup / Calibration =====
[gcode_macro SORTER_HOME]
description: Home and raise to safe Z
gcode:
  G90
  G28
  _SAFE_RAISE

[gcode_macro SET_START_HEIGHT_GUIDED]
description: Move over START stack and probe top surface
gcode:
  {% set P = printer["gcode_macro SORTER_PARAMS"] %}
  G90
  {% if printer.toolhead.position.z|float < P.clearance_z %}
    G1 Z{P.clearance_z} F{P.z_speed}
  {% endif %}
  G1 Z100 F{P.z_speed}
  RESPOND PREFIX=info MSG="Place START stack, then run: SET_START_HEIGHT_OK"

[gcode_macro SET_START_HEIGHT_OK]
description: Probe the START stack top and save as baseline
gcode:
  {% set P = printer["gcode_macro SORTER_PARAMS"] %}
  _HOP
  _MOVE_TOOL X={P.input_xy[0]} Y={P.input_xy[1]}
  PROBE SPEED={P.probe_fast}
  G91
  G1 Z2 F{P.z_speed}
  G90
  PROBE SPEED={P.probe_slow}
  UPDATE_DELAYED_GCODE ID=SET_START_HEIGHT_SAVE DURATION=0.05

[delayed_gcode SET_START_HEIGHT_SAVE]
gcode:
  {% set zsurf = printer.probe.last_z_result|float %}
  SET_GCODE_VARIABLE MACRO=STACK_STATE VARIABLE=start_h  VALUE={zsurf}
  SET_GCODE_VARIABLE MACRO=STACK_STATE VARIABLE=finish_h VALUE=0.0
  SET_GCODE_VARIABLE MACRO=STACK_STATE VARIABLE=reject_h VALUE=0.0
  _HOVER_START
  { action_respond_info("Start height saved: %.3f mm" % (zsurf)) }

[gcode_macro SET_CARD_THICKNESS]
description: Set card thickness (mm); default 0.305
gcode:
  {% set T = params.T|default(0.305)|float %}
  SET_GCODE_VARIABLE MACRO=STACK_STATE VARIABLE=card_thickness VALUE={T}
  { action_respond_info("Card thickness set to %.3f mm" % (T)) }

[gcode_macro INIT_STACKS]
description: Manually set START height (mm) and reset outputs
gcode:
  {% set S = params.START|float %}
  SET_GCODE_VARIABLE MACRO=STACK_STATE VARIABLE=start_h  VALUE={S}
  SET_GCODE_VARIABLE MACRO=STACK_STATE VARIABLE=finish_h VALUE=0.0
  SET_GCODE_VARIABLE MACRO=STACK_STATE VARIABLE=reject_h VALUE=0.0
  RESPOND PREFIX=info MSG="Stacks initialized"

[gcode_macro SET_START_FROM_CURRENT]
description: Use current Z as START height
gcode:
  {% set Z = printer.toolhead.position.z|float %}
  SET_GCODE_VARIABLE MACRO=STACK_STATE VARIABLE=start_h  VALUE={Z}
  SET_GCODE_VARIABLE MACRO=STACK_STATE VARIABLE=finish_h VALUE=0.0
  SET_GCODE_VARIABLE MACRO=STACK_STATE VARIABLE=reject_h VALUE=0.0
  _HOVER_START
  RESPOND PREFIX=info MSG="Start height set from current Z"


# ===== Motion Helpers =====
[gcode_macro _SAFE_RAISE]
gcode:
  {% set P = printer["gcode_macro SORTER_PARAMS"] %}
  G90
  {% set tgt = printer.toolhead.position.z|float %}
  {% if tgt < P.clearance_z %}{% set tgt = P.clearance_z %}{% endif %}
  G1 Z{tgt} F{P.z_speed}

[gcode_macro _HOP]
gcode:
  {% set P = printer["gcode_macro SORTER_PARAMS"] %}
  G90
  {% set tgt = printer.toolhead.position.z|float %}
  {% if tgt < P.clearance_z %}{% set tgt = P.clearance_z %}{% endif %}
  G1 Z{tgt} F{P.z_speed}

[gcode_macro _HOVER_START]
gcode:
  {% set P = printer["gcode_macro SORTER_PARAMS"] %}
  {% set S = printer["gcode_macro STACK_STATE"] %}
  {% set floor = P.min_z_floor|float %}
  {% set target = (S.start_h + P.approach_z)|float %}
  {% if target < floor %}{% set target = floor %}{% endif %}
  G90
  G1 Z{target} F{P.z_speed}

[gcode_macro _MOVE_XY]
gcode:
  {% set X = params.X|float %}
  {% set Y = params.Y|float %}
  {% set P = printer["gcode_macro SORTER_PARAMS"] %}
  G90
  G1 X{X} Y{Y} F{P.xy_speed}

[gcode_macro _MOVE_TOOL]
gcode:
  {% set TX = params.X|float %}
  {% set TY = params.Y|float %}
  {% set P   = printer["gcode_macro SORTER_PARAMS"] %}
  {% set NX = TX - P.tool_offset_x|float %}
  {% set NY = TY - P.tool_offset_y|float %}
  G90
  G1 X{NX} Y{NY} F{P.xy_speed}

[gcode_macro _MOVE_Z]
gcode:
  {% set Zt  = params.Z|float %}
  {% set P   = printer["gcode_macro SORTER_PARAMS"] %}
  {% set Zcl = Zt if Zt > P.min_z_floor else P.min_z_floor %}
  G90
  G1 Z{Zcl} F{P.z_speed}

# ===== Vacuum Control (simulated by stepper) =====
[gcode_macro VAC_ON]
description: Create vacuum (drive plunger)
gcode:
  {% set P = printer["gcode_macro SORTER_PARAMS"] %}
  {% set dist  = (params.DIST|default(P.vac_on_dist))|float %}
  {% set speed = (params.SPEED|default(P.vac_speed))|float %}
  {% set dwell = (params.DWELL|default(P.vac_dwell_ms))|int %}
  MANUAL_STEPPER STEPPER=VAC MOVE={dist} SPEED={speed}
  {% if dwell > 0 %} G4 P{dwell} {% endif %}

[gcode_macro VAC_OFF]
description: Release vacuum (reverse plunger)
gcode:
  {% set P = printer["gcode_macro SORTER_PARAMS"] %}
  {% set dist  = (params.DIST|default(P.vac_off_dist))|float %}
  {% set speed = (params.SPEED|default(P.vac_speed))|float %}
  {% set dwell = (params.DWELL|default(P.vac_dwell_ms))|int %}
  MANUAL_STEPPER STEPPER=VAC MOVE={dist} SPEED={speed}
  {% if dwell > 0 %} G4 P{dwell} {% endif %}

[gcode_macro _DWELL_MS]
description: Millisecond pause helper (wraps G4)
gcode:
  {% set P = params.P|default(200)|int %}
  G4 P{P}

# ===== Vision/Scan Orchestration =====
[gcode_macro VISION_STATE]
variable_busy: 0
variable_job: 0
variable_timer_left: 0
variable_timer_total: 0
variable_elapsed: 0
gcode: G4 P0

[gcode_macro START_SCAN_WAIT]
description: Arm scanner wait + warnings; optional T=<seconds> (0=infinite)
gcode:
  {% set P  = printer["gcode_macro SORTER_PARAMS"] %}
  {% set Tp = params.T|default(P.scan_timeout_s)|int %}
  {% set T  = 0 if Tp < 0 else Tp %}
  {% set W  = P.scan_warn_step_s|int if P.scan_warn_step_s|int > 0 else 10 %}

  {% set job = (printer["gcode_macro VISION_STATE"].job|int) + 1 %}
  SET_GCODE_VARIABLE MACRO=VISION_STATE VARIABLE=job          VALUE={job}
  SET_GCODE_VARIABLE MACRO=VISION_STATE VARIABLE=busy         VALUE=1
  SET_GCODE_VARIABLE MACRO=VISION_STATE VARIABLE=timer_left   VALUE={T}
  SET_GCODE_VARIABLE MACRO=VISION_STATE VARIABLE=timer_total  VALUE={T}
  SET_GCODE_VARIABLE MACRO=VISION_STATE VARIABLE=elapsed      VALUE=0

  { action_respond_info("SCAN_WAIT armed (timeout=%s) job=%d" %
      (("infinite" if T == 0 else ("%ds" % T)), job)) }

  UPDATE_DELAYED_GCODE ID=VISION_TICK DURATION={W}
  {% if T > 0 and P.timeout_auto_fail|int == 1 %}
    UPDATE_DELAYED_GCODE ID=VISION_TIMEOUT DURATION={T}
  {% else %}
    UPDATE_DELAYED_GCODE ID=VISION_TIMEOUT DURATION=0
  {% endif %}

[delayed_gcode VISION_TICK]
gcode:
  {% set P = printer["gcode_macro SORTER_PARAMS"] %}
  {% set S = printer["gcode_macro VISION_STATE"] %}
  {% set W = P.scan_warn_step_s|int if P.scan_warn_step_s|int > 0 else 10 %}
  {% if S.busy|int != 1 %}
    UPDATE_DELAYED_GCODE ID=VISION_TICK DURATION=0
  {% else %}
    {% set total = S.timer_total|int %}
    {% if total == 0 %}
      {% set elapsed = (S.elapsed|int) + W %}
      SET_GCODE_VARIABLE MACRO=VISION_STATE VARIABLE=elapsed VALUE={elapsed}
      { action_respond_info("READY: %ds elapsed; waiting (no auto-fail)." % (elapsed)) }
      UPDATE_DELAYED_GCODE ID=VISION_TICK DURATION={W}
    {% else %}
      {% set left  = (S.timer_left|int) - W %}
      {% set left  = 0 if left < 0 else left %}
      {% set elapsed = total - left %}
      SET_GCODE_VARIABLE MACRO=VISION_STATE VARIABLE=timer_left VALUE={left}
      { action_respond_info("READY: %ds elapsed; timing out in %ds." % (elapsed, left)) }
      {% if left > 0 %}
        UPDATE_DELAYED_GCODE ID=VISION_TICK DURATION={W}
      {% endif %}
    {% endif %}
  {% endif %}

[delayed_gcode VISION_TIMEOUT]
gcode:
  {% set P = printer["gcode_macro SORTER_PARAMS"] %}
  {% if (printer["gcode_macro VISION_STATE"].busy|int) == 1 %}
    {% if P.timeout_auto_fail|int == 1 %}
      RESPOND PREFIX=warn MSG="VISION_TIMEOUT fired – defaulting to FAIL"
      SCAN_FAIL
    {% else %}
      RESPOND PREFIX=warn MSG="VISION_TIMEOUT reached – auto-fail disabled; still waiting"
      UPDATE_DELAYED_GCODE ID=VISION_TICK DURATION={P.scan_warn_step_s|int}
    {% endif %}
  {% else %}
    RESPOND PREFIX=info MSG="VISION_TIMEOUT: no-op (not busy)"
  {% endif %}

[gcode_macro ANNOUNCE_READY]
description: Send human+machine READY lines (listener watches M118)
gcode:
  {% set P   = printer["gcode_macro SORTER_PARAMS"] %}
  {% set job = printer["gcode_macro VISION_STATE"].job|int %}
  {% set rem = printer["gcode_macro ISTATE"].remaining|int %}
  { action_respond_info("READY_TO_SCAN job=%d x=%.1f y=%.1f rem=%d" % (job, P.scan_xy[0], P.scan_xy[1], rem)) }
  M118 READY_TO_SCAN job={job} x={P.scan_xy[0]} y={P.scan_xy[1]} rem={rem}


# ===== Primitives =====
[gcode_macro PICKUP_CARD]
description: Pick up top card from START stack
gcode:
  VAC_OFF
  {% set P = printer["gcode_macro SORTER_PARAMS"] %}
  {% set S = printer["gcode_macro STACK_STATE"] %}
  _HOVER_START
  _MOVE_TOOL X={P.input_xy[0]}  Y={P.input_xy[1]}
  {% set surf = S.start_h|float %}
  {% set pick = (surf + P.pick_z)|float %}
  {% set guard = (surf + P.pick_guard)|float %}
  {% set pick_target = pick if pick > guard else guard %}
  _MOVE_Z Z={pick_target}
  VAC_ON
  _DWELL_MS P={P.dwell_pick_ms}
  _MOVE_Z Z={pick_target + P.lift_after_pick}
  _HOP

[gcode_macro MOVE_TO_SCAN]
description: Move to scan plane, drop card, lift head, arm wait, announce ready
gcode:
  {% set P = printer["gcode_macro SORTER_PARAMS"] %}
  _HOP
  _MOVE_TOOL X={P.scan_xy[0]} Y={P.scan_xy[1]}
  _MOVE_Z Z={P.scan_h}
  VAC_OFF
  _DWELL_MS P={P.dwell_release_ms}
  _MOVE_Z Z={P.scan_h + P.lift_after_pick}
  _DWELL_MS P={P.dwell_scan_ms}
  M400
  START_SCAN_WAIT T={printer["gcode_macro SORTER_PARAMS"].scan_timeout_s|default(20)}
  ANNOUNCE_READY


# ===== Scan Results from App =====
[gcode_macro SCAN_OK]
description: External app: card PASSED — place to FINISH and continue
gcode:
  {% if printer["gcode_macro VISION_STATE"].busy|int != 1 %}
    RESPOND PREFIX=warn MSG="SCAN_OK ignored (not busy)"
  {% else %}
    UPDATE_DELAYED_GCODE ID=VISION_TIMEOUT DURATION=0
    UPDATE_DELAYED_GCODE ID=VISION_TICK    DURATION=0
    SET_GCODE_VARIABLE MACRO=VISION_STATE VARIABLE=busy VALUE=0
    M118 ACK_SCAN_OK job={printer["gcode_macro VISION_STATE"].job}

    {% set P = printer["gcode_macro SORTER_PARAMS"] %}
    {% set S = printer["gcode_macro STACK_STATE"] %}

    _MOVE_Z Z={P.scan_h}
    VAC_ON
    _DWELL_MS P=150
    _MOVE_Z Z={P.scan_h + P.lift_after_pick}
    _HOP

    PLACE_FINISHED

    {% set new_start  = (S.start_h  - S.card_thickness)|float %}
    {% set new_finish = (S.finish_h + S.card_thickness)|float %}
    SET_GCODE_VARIABLE MACRO=STACK_STATE VARIABLE=start_h  VALUE={new_start}
    SET_GCODE_VARIABLE MACRO=STACK_STATE VARIABLE=finish_h VALUE={new_finish}

    {% set remaining = (printer["gcode_macro ISTATE"].remaining|default(1))|int %}
    {% set next_remaining = remaining - 1 if remaining > 0 else 0 %}
    SET_GCODE_VARIABLE MACRO=ISTATE VARIABLE=remaining VALUE={next_remaining}

    _HOVER_START
    {% if next_remaining > 0 %}
      SORTER_CYCLE_INTERACTIVE
    {% else %}
      RESPOND PREFIX=info MSG="Run complete."
    {% endif %}
  {% endif %}

[gcode_macro SCAN_FAIL]
description: External app: card FAILED — place to REJECT and continue
gcode:
  {% if printer["gcode_macro VISION_STATE"].busy|int != 1 %}
    RESPOND PREFIX=warn MSG="SCAN_FAIL ignored (not busy)"
  {% else %}
    UPDATE_DELAYED_GCODE ID=VISION_TIMEOUT DURATION=0
    UPDATE_DELAYED_GCODE ID=VISION_TICK    DURATION=0
    SET_GCODE_VARIABLE MACRO=VISION_STATE VARIABLE=busy VALUE=0
    M118 ACK_SCAN_FAIL job={printer["gcode_macro VISION_STATE"].job}

    {% set P = printer["gcode_macro SORTER_PARAMS"] %}
    {% set S = printer["gcode_macro STACK_STATE"] %}

    _MOVE_Z Z={P.scan_h}
    VAC_ON
    _DWELL_MS P=150
    _MOVE_Z Z={P.scan_h + P.lift_after_pick}
    _HOP

    PLACE_REJECT

    {% set new_start  = (S.start_h  - S.card_thickness)|float %}
    {% set new_reject = (S.reject_h + S.card_thickness)|float %}
    SET_GCODE_VARIABLE MACRO=STACK_STATE VARIABLE=start_h  VALUE={new_start}
    SET_GCODE_VARIABLE MACRO=STACK_STATE VARIABLE=reject_h VALUE={new_reject}

    {% set remaining = (printer["gcode_macro ISTATE"].remaining|default(1))|int %}
    {% set next_remaining = remaining - 1 if remaining > 0 else 0 %}
    SET_GCODE_VARIABLE MACRO=ISTATE VARIABLE=remaining VALUE={next_remaining}

    _HOVER_START
    {% if next_remaining > 0 %}
      SORTER_CYCLE_INTERACTIVE
    {% else %}
      RESPOND PREFIX=info MSG="Run complete."
    {% endif %}
  {% endif %}

[gcode_macro PLACE_FINISHED]
description: Place held card onto FINISH stack (releases there)
gcode:
  {% set P = printer["gcode_macro SORTER_PARAMS"] %}
  {% set S = printer["gcode_macro STACK_STATE"] %}
  {% set hover = S.finish_h + P.approach_z %}
  {% set targetZ = P.clearance_z if P.clearance_z > hover else hover %}
  _MOVE_Z Z={targetZ}
  _MOVE_TOOL X={P.finish_xy[0]} Y={P.finish_xy[1]}
  _MOVE_Z Z={S.finish_h + P.place_z}
  M400
  _DWELL_MS P=120
  VAC_OFF
  _DWELL_MS P={P.dwell_release_ms}
  _HOP

[gcode_macro PLACE_REJECT]
description: Place held card onto REJECT stack (releases there)
gcode:
  {% set P = printer["gcode_macro SORTER_PARAMS"] %}
  {% set S = printer["gcode_macro STACK_STATE"] %}
  {% set hover = S.reject_h + P.approach_z %}
  {% set targetZ = P.clearance_z if P.clearance_z > hover else hover %}
  _MOVE_Z Z={targetZ}
  _MOVE_TOOL X={P.reject_xy[0]} Y={P.reject_xy[1]}
  _MOVE_Z Z={S.reject_h + P.place_z}
  M400
  _DWELL_MS P=120
  VAC_OFF
  _DWELL_MS P={P.dwell_release_ms}
  _HOP


# ===== Interactive Loop =====
[gcode_macro ISTATE]
variable_remaining: 0
gcode:
  G4 P0

[gcode_macro SORTER_CYCLE_INTERACTIVE]
description: One full cycle: pick → move to scan → wait for app result
gcode:
  PICKUP_CARD
  MOVE_TO_SCAN

[gcode_macro RUN_SORTER_INTERACTIVE]
description: Run N cards; will home automatically if needed. Example: RUN_SORTER_INTERACTIVE COUNT=10 HOME=1
gcode:
  {% set COUNT = params.COUNT|default(2)|int %}
  {% set HOME  = params.HOME|default(0)|int %}
  {% set homed = (printer.toolhead.homed_axes|string)|lower %}

  {% if HOME == 1 or not ('x' in homed and 'y' in homed and 'z' in homed) %}
    G90
    G28
    _SAFE_RAISE
  {% endif %}

  SET_GCODE_VARIABLE MACRO=ISTATE VARIABLE=remaining VALUE={COUNT}
  SORTER_CYCLE_INTERACTIVE

[gcode_macro SHOW_STACKS]
description: Print current stack heights and card thickness
gcode:
  {% set S = printer["gcode_macro STACK_STATE"] %}
  { action_respond_info("STACKS: start=%.3f finish=%.3f reject=%.3f (card=%.3f)"
      % (S.start_h, S.finish_h, S.reject_h, S.card_thickness)) }
